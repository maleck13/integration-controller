// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fuse

import (
	"github.com/integr8ly/integration-controller/pkg/apis/syndesis/v1alpha1"
	"sync"
)

var (
	lockFuseClientMockConnectionExists    sync.RWMutex
	lockFuseClientMockCreateConnection    sync.RWMutex
	lockFuseClientMockCreateCustomisation sync.RWMutex
	lockFuseClientMockDeleteConnection    sync.RWMutex
	lockFuseClientMockDeleteConnector     sync.RWMutex
	lockFuseClientMockUpdateConnection    sync.RWMutex
)

// FuseClientMock is a mock implementation of FuseClient.
//
//     func TestSomethingThatUsesFuseClient(t *testing.T) {
//
//         // make and configure a mocked FuseClient
//         mockedFuseClient := &FuseClientMock{
//             ConnectionExistsFunc: func(c *v1alpha1.Connection) (bool, error) {
// 	               panic("TODO: mock out the ConnectionExists method")
//             },
//             CreateConnectionFunc: func(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
// 	               panic("TODO: mock out the CreateConnection method")
//             },
//             CreateCustomisationFunc: func(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
// 	               panic("TODO: mock out the CreateCustomisation method")
//             },
//             DeleteConnectionFunc: func(c *v1alpha1.Connection) error {
// 	               panic("TODO: mock out the DeleteConnection method")
//             },
//             DeleteConnectorFunc: func(c *v1alpha1.Connection) error {
// 	               panic("TODO: mock out the DeleteConnector method")
//             },
//             UpdateConnectionFunc: func(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
// 	               panic("TODO: mock out the UpdateConnection method")
//             },
//         }
//
//         // TODO: use mockedFuseClient in code that requires FuseClient
//         //       and then make assertions.
//
//     }
type FuseClientMock struct {
	// ConnectionExistsFunc mocks the ConnectionExists method.
	ConnectionExistsFunc func(c *v1alpha1.Connection) (bool, error)

	// CreateConnectionFunc mocks the CreateConnection method.
	CreateConnectionFunc func(c *v1alpha1.Connection) (*v1alpha1.Connection, error)

	// CreateCustomisationFunc mocks the CreateCustomisation method.
	CreateCustomisationFunc func(c *v1alpha1.Connection) (*v1alpha1.Connection, error)

	// DeleteConnectionFunc mocks the DeleteConnection method.
	DeleteConnectionFunc func(c *v1alpha1.Connection) error

	// DeleteConnectorFunc mocks the DeleteConnector method.
	DeleteConnectorFunc func(c *v1alpha1.Connection) error

	// UpdateConnectionFunc mocks the UpdateConnection method.
	UpdateConnectionFunc func(c *v1alpha1.Connection) (*v1alpha1.Connection, error)

	// calls tracks calls to the methods.
	calls struct {
		// ConnectionExists holds details about calls to the ConnectionExists method.
		ConnectionExists []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
		// CreateConnection holds details about calls to the CreateConnection method.
		CreateConnection []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
		// CreateCustomisation holds details about calls to the CreateCustomisation method.
		CreateCustomisation []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
		// DeleteConnection holds details about calls to the DeleteConnection method.
		DeleteConnection []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
		// DeleteConnector holds details about calls to the DeleteConnector method.
		DeleteConnector []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
		// UpdateConnection holds details about calls to the UpdateConnection method.
		UpdateConnection []struct {
			// C is the c argument value.
			C *v1alpha1.Connection
		}
	}
}

// ConnectionExists calls ConnectionExistsFunc.
func (mock *FuseClientMock) ConnectionExists(c *v1alpha1.Connection) (bool, error) {
	if mock.ConnectionExistsFunc == nil {
		panic("FuseClientMock.ConnectionExistsFunc: method is nil but FuseClient.ConnectionExists was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockConnectionExists.Lock()
	mock.calls.ConnectionExists = append(mock.calls.ConnectionExists, callInfo)
	lockFuseClientMockConnectionExists.Unlock()
	return mock.ConnectionExistsFunc(c)
}

// ConnectionExistsCalls gets all the calls that were made to ConnectionExists.
// Check the length with:
//     len(mockedFuseClient.ConnectionExistsCalls())
func (mock *FuseClientMock) ConnectionExistsCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockConnectionExists.RLock()
	calls = mock.calls.ConnectionExists
	lockFuseClientMockConnectionExists.RUnlock()
	return calls
}

// CreateConnection calls CreateConnectionFunc.
func (mock *FuseClientMock) CreateConnection(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
	if mock.CreateConnectionFunc == nil {
		panic("FuseClientMock.CreateConnectionFunc: method is nil but FuseClient.CreateConnection was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockCreateConnection.Lock()
	mock.calls.CreateConnection = append(mock.calls.CreateConnection, callInfo)
	lockFuseClientMockCreateConnection.Unlock()
	return mock.CreateConnectionFunc(c)
}

// CreateConnectionCalls gets all the calls that were made to CreateConnection.
// Check the length with:
//     len(mockedFuseClient.CreateConnectionCalls())
func (mock *FuseClientMock) CreateConnectionCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockCreateConnection.RLock()
	calls = mock.calls.CreateConnection
	lockFuseClientMockCreateConnection.RUnlock()
	return calls
}

// CreateCustomisation calls CreateCustomisationFunc.
func (mock *FuseClientMock) CreateCustomisation(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
	if mock.CreateCustomisationFunc == nil {
		panic("FuseClientMock.CreateCustomisationFunc: method is nil but FuseClient.CreateCustomisation was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockCreateCustomisation.Lock()
	mock.calls.CreateCustomisation = append(mock.calls.CreateCustomisation, callInfo)
	lockFuseClientMockCreateCustomisation.Unlock()
	return mock.CreateCustomisationFunc(c)
}

// CreateCustomisationCalls gets all the calls that were made to CreateCustomisation.
// Check the length with:
//     len(mockedFuseClient.CreateCustomisationCalls())
func (mock *FuseClientMock) CreateCustomisationCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockCreateCustomisation.RLock()
	calls = mock.calls.CreateCustomisation
	lockFuseClientMockCreateCustomisation.RUnlock()
	return calls
}

// DeleteConnection calls DeleteConnectionFunc.
func (mock *FuseClientMock) DeleteConnection(c *v1alpha1.Connection) error {
	if mock.DeleteConnectionFunc == nil {
		panic("FuseClientMock.DeleteConnectionFunc: method is nil but FuseClient.DeleteConnection was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockDeleteConnection.Lock()
	mock.calls.DeleteConnection = append(mock.calls.DeleteConnection, callInfo)
	lockFuseClientMockDeleteConnection.Unlock()
	return mock.DeleteConnectionFunc(c)
}

// DeleteConnectionCalls gets all the calls that were made to DeleteConnection.
// Check the length with:
//     len(mockedFuseClient.DeleteConnectionCalls())
func (mock *FuseClientMock) DeleteConnectionCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockDeleteConnection.RLock()
	calls = mock.calls.DeleteConnection
	lockFuseClientMockDeleteConnection.RUnlock()
	return calls
}

// DeleteConnector calls DeleteConnectorFunc.
func (mock *FuseClientMock) DeleteConnector(c *v1alpha1.Connection) error {
	if mock.DeleteConnectorFunc == nil {
		panic("FuseClientMock.DeleteConnectorFunc: method is nil but FuseClient.DeleteConnector was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockDeleteConnector.Lock()
	mock.calls.DeleteConnector = append(mock.calls.DeleteConnector, callInfo)
	lockFuseClientMockDeleteConnector.Unlock()
	return mock.DeleteConnectorFunc(c)
}

// DeleteConnectorCalls gets all the calls that were made to DeleteConnector.
// Check the length with:
//     len(mockedFuseClient.DeleteConnectorCalls())
func (mock *FuseClientMock) DeleteConnectorCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockDeleteConnector.RLock()
	calls = mock.calls.DeleteConnector
	lockFuseClientMockDeleteConnector.RUnlock()
	return calls
}

// UpdateConnection calls UpdateConnectionFunc.
func (mock *FuseClientMock) UpdateConnection(c *v1alpha1.Connection) (*v1alpha1.Connection, error) {
	if mock.UpdateConnectionFunc == nil {
		panic("FuseClientMock.UpdateConnectionFunc: method is nil but FuseClient.UpdateConnection was just called")
	}
	callInfo := struct {
		C *v1alpha1.Connection
	}{
		C: c,
	}
	lockFuseClientMockUpdateConnection.Lock()
	mock.calls.UpdateConnection = append(mock.calls.UpdateConnection, callInfo)
	lockFuseClientMockUpdateConnection.Unlock()
	return mock.UpdateConnectionFunc(c)
}

// UpdateConnectionCalls gets all the calls that were made to UpdateConnection.
// Check the length with:
//     len(mockedFuseClient.UpdateConnectionCalls())
func (mock *FuseClientMock) UpdateConnectionCalls() []struct {
	C *v1alpha1.Connection
} {
	var calls []struct {
		C *v1alpha1.Connection
	}
	lockFuseClientMockUpdateConnection.RLock()
	calls = mock.calls.UpdateConnection
	lockFuseClientMockUpdateConnection.RUnlock()
	return calls
}
